#project name:Inventory Management and Restocking Forecast for Products
# Importing necessary libraries
import pandas as pd
import matplotlib.pyplot as plt

# Data: Product details such as ID, name, stock, weekly sales, and restock threshold
data = {
    "product_id": [
        101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
        111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
        121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
        131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
        141, 142, 143, 144, 145, 146, 147, 148, 149, 150
    ],
    "product_name": [
        'Laptop', 'Mouse', 'Keyboard', 'Monitor', 'Headphones',
        'Webcam', 'Speaker', 'USB Drive', 'External HDD', 'SSD',
        'Printer', 'Scanner', 'Router', 'Switch', 'Projector',
        'Smartwatch', 'Tablet', 'Smartphone', 'Charger', 'Power Bank',
        'Keyboard Case', 'Phone Case', 'Screen Guard', 'Camera', 'Tripod',
        'Lens', 'Flash', 'Drone', 'Microphone', 'Lighting Kit',
        'HDMI Cable', 'Ethernet Cable', 'Power Cord', 'Adapter', 'Surge Protector',
        'Memory Card', 'Bluetooth Dongle', 'Game Console', 'Game Controller', 'VR Headset',
        'Smart TV', 'Streaming Stick', 'Network Extender', 'Mesh Router', '3D Printer',
        'Filament', 'Vacuum Robot', 'Air Purifier', 'Water Purifier', 'Coffee Maker'
    ],
    "current_stock": [
        50, 150, 200, 80, 120, 110, 250, 400, 60, 180,
        50, 70, 90, 130, 40, 300, 200, 500, 100, 80,
        140, 240, 350, 60, 90, 50, 30, 40, 100, 70,
        250, 300, 200, 150, 180, 400, 100, 70, 90, 60,
        30, 100, 70, 250, 300, 200, 150, 180, 400, 100
    ],
    "sales_per_week": [
        30, 50, 40, 20, 60, 35, 70, 120, 10, 60,
        15, 20, 25, 40, 10, 100, 60, 150, 40, 30,
        50, 90, 100, 20, 25, 15, 10, 5, 20, 15,
        80, 90, 50, 40, 50, 120, 30, 20, 25, 15,
        5, 20, 15, 80, 90, 50, 40, 50, 120, 30
    ],
    "restock_threshold": [
        20, 50, 50, 30, 30, 50, 80, 150, 20, 80,
        25, 30, 35, 60, 20, 120, 80, 180, 60, 50,
        70, 100, 120, 30, 40, 20, 15, 10, 30, 20,
        100, 120, 70, 60, 70, 150, 40, 30, 40, 20,
        10, 30, 20, 100, 120, 70, 60, 70, 150, 40
    ]
}

# This line creates a DataFrame from the above data dictionary.
df = pd.DataFrame(data)

# Calculates predicted stock for the next 4 weeks.
# This subtracts the total sales (sales per week * 4) from the current stock to estimate future stock.
df['predicted_stock_4wks'] = df['current_stock'] - (df['sales_per_week'] * 4)

# Assigns restock status based on whether the predicted stock falls below the restock threshold.
# If predicted stock <= threshold, it needs restocking.
df['restock_status'] = df.apply(
    lambda x: "Restock Needed" if x['predicted_stock_4wks'] <= x['restock_threshold'] else "Stock Sufficient",
    axis=1
)

# This step marks products that need restocking by comparing current stock to the threshold.
df['needs_restock'] = df['current_stock'] < df['restock_threshold']

# This block visualizes the data with a horizontal bar chart.
# A bar chart is created comparing the current stock to the restock threshold.

fig, ax = plt.subplots(figsize=(18, 24))  # Adjusted figure size for better visibility of all products

# Bar chart displaying current stock
bars = ax.barh(df['product_name'], df['current_stock'], color='skyblue', label='Current Stock')

# Scatter plot for restock thresholds
ax.scatter(df['current_stock'], df['product_name'], color='red', label='Restock Threshold', marker='o')

# Highlighting products that need restocking by changing the bar color to orange
for i, bar in enumerate(bars):
    if df.iloc[i]['current_stock'] < df.iloc[i]['restock_threshold']:
        bar.set_color('orange')

# Adding labels to the bars for clarity
for bar in bars:
    xval = bar.get_width()
    ax.text(xval + 2, bar.get_y() + bar.get_height() / 2, int(xval), va='center', fontsize=9)

# Adding title and axis labels
ax.set_title('Inventory: Stock vs Restock Threshold', fontsize=18)
ax.set_xlabel('Quantity', fontsize=14)
ax.set_ylabel('Products', fontsize=14)

# Rotating the y-axis labels for better readability
plt.yticks(rotation=0)

# Adding legend to the chart
ax.legend()

# Adding grid for better readability of the chart
ax.grid(axis='x', linestyle='--', alpha=0.7)

# Adjusting layout to prevent clipping of elements
plt.tight_layout()

# This line shows the graph with the visualized data.
plt.show()

# Finally, this will display the table of product details with their current stock, predicted stock, and restock status.
print(df[['product_name', 'current_stock', 'predicted_stock_4wks', 'restock_status']])

